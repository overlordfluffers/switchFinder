{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","seconds","setSeconds","distance","setDistance","zipcode","setZipcode","stores","setStores","fetchData","axios","get","headers","responseType","then","e","data","products","locations","concat","useMemo","className","color","alpha","size","onComplete","type","value","onChange","event","target","Math","floor","onClick","map","store","store_name","store_address","location_available_to_promise_quantity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mSA0EeA,MArEf,WAAgB,IAAD,EACiBC,IAAMC,SAAS,KADhC,mBACNC,EADM,KACGC,EADH,OAEmBH,IAAMC,SAAS,MAFlC,mBAENG,EAFM,KAEIC,EAFJ,OAGiBL,IAAMC,SAAS,SAHhC,mBAGNK,EAHM,KAGGC,EAHH,OAIeP,IAAMC,SAAS,IAJ9B,mBAINO,EAJM,KAIEC,EAJF,KASPC,EAAY,WAChBP,EAAWD,EAAQ,MACnBS,IAAMC,IAAN,4JAA+JN,EAA/J,iDAA+MF,EAA/M,0FAAiT,CAC/SS,QAAS,CACP,8BAA+B,KAEjCC,aAAc,SACbC,MAAK,SAACC,GACPP,EAAUO,EAAEC,KAAKC,SAAS,GAAGC,cAC5BJ,KACHJ,IAAMC,IAAN,4JAA+JN,EAA/J,iDAA+MF,EAA/M,0FAAiT,CAC/SS,QAAS,CACP,8BAA+B,KAEjCC,aAAc,SACbC,MAAK,SAACC,GACPP,EAAUD,EAAOY,OAAOJ,EAAEC,KAAKC,SAAS,GAAGC,iBAQ/C,OAJAE,mBAAQ,WACNX,MACA,IAGA,yBAAKY,UAAU,OACb,yBAAKA,UAAW,SACd,kBAAC,IAAD,CAAqBpB,QAASA,EAASqB,MAAM,UAAUC,MAAO,GAAKC,KAAM,IAAKC,WAAY,WAAKhB,QAEjG,yBAAKY,UAAW,YACd,yBAAKA,UAAW,SACd,6BAAM,cACN,2BAAOK,KAAM,OAAQC,MAAOxB,EAAUyB,SAAU,SAACC,GAASzB,EAAYyB,EAAMC,OAAOH,WAErF,yBAAKN,UAAW,SACd,6BAAM,cACN,2BAAOK,KAAM,OAAQC,MAAOtB,EAASuB,SAAU,SAACC,GAASvB,EAAWuB,EAAMC,OAAOH,WAEnF,yBAAKN,UAAW,SACd,6BAAM,UACN,2BAAOK,KAAM,OAAQC,MAAOI,KAAKC,MAAM/B,EAAQ,IAAK2B,SAAU,SAACC,GAAS3B,EAA8B,GAAnB2B,EAAMC,OAAOH,WAElG,4BAAQM,QAAS,WAAKxB,MAAtB,mBAEF,yBAAKY,UAAW,WACbd,EAAO2B,KAAI,SAACC,GACX,OACE,6BACE,6BAAM,SAASA,EAAMC,YACrB,6BAAM,YAAYD,EAAME,eACxB,6BAAM,aAAaF,EAAMhC,SAAS,MAClC,6BAAM,eAAegC,EAAMG,+CCrDrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d43f212c.chunk.js","sourcesContent":["import React, {useEffect, useMemo} from 'react';\nimport ReactCountdownClock from 'react-countdown-clock'\nimport './App.css';\nimport axios from 'axios'\n\nfunction App() {\n  const [seconds, setSeconds] = React.useState(10*60)\n  const [distance, setDistance] = React.useState('50')\n  const [zipcode, setZipcode] = React.useState('01864')\n  const [stores, setStores] = React.useState([])\n\n\n  //RedBlue: 77464001\n  //Grey: 77464002\n  const fetchData = () => {\n    setSeconds(seconds+0.0000001)\n    axios.get(`https://thingproxy.freeboard.io/fetch/https://api.target.com/fulfillment_aggregator/v1/fiats/77464002?key=eb2551e4accc14f38cc42d32fbc2b2ea&nearby=${zipcode}&limit=20&requested_quantity=1&radius=${distance}&include_only_available_stores=true&fulfillment_test_mode=grocery_opu_team_member_test`, {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\"\n      },\n      responseType: 'json',\n    }).then((e)=>{\n      setStores(e.data.products[0].locations);\n    }).then(\n    axios.get(`https://thingproxy.freeboard.io/fetch/https://api.target.com/fulfillment_aggregator/v1/fiats/77464001?key=eb2551e4accc14f38cc42d32fbc2b2ea&nearby=${zipcode}&limit=20&requested_quantity=1&radius=${distance}&include_only_available_stores=true&fulfillment_test_mode=grocery_opu_team_member_test`, {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\"\n      },\n      responseType: 'json',\n    }).then((e)=>{\n      setStores(stores.concat(e.data.products[0].locations));\n    }))\n  }\n\n  useMemo(()=>{\n    fetchData()\n  },[])\n\n  return (\n    <div className=\"App\">\n      <div className={'clock'}>\n        <ReactCountdownClock seconds={seconds} color=\"#90EE90\" alpha={0.9} size={250} onComplete={()=>{fetchData()}} />\n      </div>\n      <div className={'settings'}>\n        <div className={'input'}>\n          <div>{\"Distance: \"}</div>\n          <input type={'text'} value={distance} onChange={(event)=>{setDistance(event.target.value)}}/>\n        </div>\n        <div className={'input'}>\n          <div>{\"Zip Code: \"}</div>\n          <input type={'text'} value={zipcode} onChange={(event)=>{setZipcode(event.target.value)}}/>\n        </div>\n        <div className={'input'}>\n          <div>{\"Time: \"}</div>\n          <input type={'text'} value={Math.floor(seconds/60)} onChange={(event)=>{setSeconds(event.target.value*60)}}/>\n        </div>\n        <button onClick={()=>{fetchData()}}> Refresh Nerd </button>\n      </div>\n      <div className={'results'}>\n        {stores.map((store)=>{\n          return (\n            <div>\n              <div>{\"City: \"+store.store_name}</div>\n              <div>{\"Address: \"+store.store_address}</div>\n              <div>{\"Distance: \"+store.distance+\"mi\"}</div>\n              <div>{\"Available*: \"+store.location_available_to_promise_quantity}</div>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}